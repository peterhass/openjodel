defmodule Openjodel.Streams.Provide do
  alias Openjodel.{
    Repo,
    Stream,
    User,
    Streams
  }
  
  import Ecto.Query
  
  def provide(_user, %{geog: geog} = attrs) do
    # db side trigger prevents overlapping streams
    #TODO: use Geocoder to receive village name
    IO.inspect(attrs)
    %Stream{name: "<autogenerated>"}
    |> Stream.stream_to_insert_now
    |> Stream.changeset(attrs)
    |> Repo.insert(on_conflict: :nothing)
    |> case do
      {:ok, s} -> s
      {:error, e} -> IO.inspect("ERROR happend", e)
    end
        
    #stream = Streams.Query.containing_position(cast_attr_geog(geog)) |> IO.inspect |> hd
    stream = Streams.Query.containing_position(cast_attr_geog(geog)) 
    |> IO.inspect 
    |> List.first
    |> case do
      nil -> 
        IO.inspect("second run ...")
        Streams.Query.containing_position(cast_attr_geog(geog))
        |> IO.inspect
        throw('check output')

      any -> any
    end 

    {:ok, stream}
  end

  defp cast_attr_geog(geog) do
    {:ok, point} = Geo.PostGIS.Geometry.cast(geog)
    point
  end
end

